struct STN {ll ma, lazy;};
struct SegmentTree {
    const STN DEF = {(ll)0, (ll)0};
    vector<STN> s; ll uu, vv;
    SegmentTree(ll n): s(4 * n + 10, DEF), uu(0), vv(n) {}
    
    STN merge(STN a, STN b) {return {max(a.ma, b.ma), DEF.lazy};}
    void down(ll id, ll l, ll r) {
        if (s[id].lazy == 0) return;
        ll tmp = s[id].lazy;
        s[id].lazy = 0;
        s[id << 1].lazy += tmp;
        s[id << 1 | 1].lazy += tmp;
        s[id << 1].ma += tmp;
        s[id << 1 | 1].ma += tmp;
    }
    void update(ll u, ll v, ll ma) {update(u, v, ma, 1, uu, vv);}
    void update(ll u, ll v, ll ma, ll id, ll l, ll r) {
        if (l > v || r < u) return;
        if (u <= l && r <= v) {
            s[id].ma += ma;
            s[id].lazy += ma;
            return;
        }
        down(id, l, r);
        ll mid = (l + r) >> 1;
        update(u, v, ma, id << 1, l, mid);
        update(u, v, ma, id << 1 | 1, mid + 1, r);
        s[id] = merge(s[id << 1], s[id << 1 | 1]);
    }
    STN get(ll u, ll v) {return get(u, v, 1, uu, vv);}
    STN get(ll u, ll v, ll id, ll l, ll r) {
        if (l > v || r < u) return DEF;
        if (u <= l && r <= v) return s[id];
        down(id, l, r);
        ll mid = (l + r) >> 1;
        return merge(get(u, v, id << 1, l, mid), get(u, v, id << 1 | 1, mid + 1, r));
    }
};