struct MSTN {oset<pair<ll, ll>> a;};
struct MergeSortTree {
    vector<MSTN> node;
    const MSTN DEADNODE = {oset<pair<ll, ll>>()};
    ll uu, vv;
    void init(ll n, ll uu, ll vv) {
        node.resize(n * 4, DEADNODE);
        this->uu = uu;
        this->vv = vv;
    }
    void build(ll n, ll *a) {build(n, a, 1, uu, vv);}
    void build(ll n, ll *a, ll id, ll l, ll r) {
        if (l == r) {
            node[id].a.insert({a[r], r});
            return;
        }
        ll mid = (l + r) >> 1;
        build(n, a, id << 1, l, mid);
        build(n, a, id << 1 | 1, mid + 1, r);
        for (auto x: node[id << 1].a) node[id].a.insert(x);
        for (auto x: node[id << 1 | 1].a) node[id].a.insert(x);
    }

    void update(ll pos, pair<ll, ll> oldValue, pair<ll, ll> newValue) {update(pos, oldValue, newValue, 1, uu, vv);}
    void update(ll pos, pair<ll, ll> oldValue, pair<ll, ll> newValue, ll id, ll l, ll r) {
        if (pos < l || pos > r) return;
        if (l == r) {
            node[id].a.erase(oldValue);
            node[id].a.insert(newValue);
            return;
        }
        ll mid = (l + r) >> 1;
        update(pos, oldValue, newValue, id >> 1, l, mid);
        update(pos, oldValue, newValue, id >> 1 | 1, mid + 1, r);
        node[id].a.erase(oldValue);
        node[id].a.insert(newValue);
    } 

    ll get(ll u, ll v, ll x) {return get(u, v, x, 1ll, uu, vv);}
    ll get(ll u, ll v, ll x, ll id, ll l, ll r) {
        if (r < u || l > v) return 0;
        if (v >= r && l >= u) return node[id].a.order_of_key({x + 1, 0});    
        ll mid = (l + r) >> 1;
        return get(u, v, x, id << 1, l, mid) + get(u, v, x, id << 1 | 1, mid + 1, r);
    }
};

/*
    [Problem]: https://www.spoj.com/problems/MKTHNUM/
    [Code]: https://paste.ubuntu.com/p/3Bk5CDgkkQ/
    [Double Check]: 08/04/2024
*/