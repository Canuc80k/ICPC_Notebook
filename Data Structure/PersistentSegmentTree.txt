struct PSTN {
	ll val;
	PSTN *l, *r;

	PSTN(ll x) : val(x), l(nullptr), r(nullptr) {}
	PSTN(PSTN *ll, PSTN *rr) {
		l = ll, r = rr;
		val = 0;
		if (l) val += l->val;
		if (r) val += r->val;
	}
	PSTN(PSTN *cp) : val(cp->val), l(cp->l), r(cp->r) {}
};

struct PersistentSegmentTree {
    vector<PSTN*> roots;
    void init(ll n) {roots.resize(n + 10, 0);}
    PSTN *build(ll l, ll r, ll *a) {
        if (l == r) return new PSTN(a[l]);
        ll mid = (l + r) >> 1;
        return new PSTN(build(l, mid, a), build(mid + 1, r, a));
    }

    PSTN *update(PSTN *node, ll l, ll r, ll val, ll pos) {
        if (l == r) return new PSTN(val);
        ll mid = (l + r) >> 1;
        if (pos > mid)
            return new PSTN(node->l, update(node->r, mid + 1, r, val, pos));
        else return new PSTN(update(node->l, l, mid, val, pos), node->r);
    }

    ll query(PSTN *node, ll l, ll r, ll u, ll v) {
        if (r < u || l > v) return 0;
        if (l >= u && r <= v) return node->val;
        ll mid = (l + r) >> 1;
        return query(node->l, l, mid, u, v) + query(node->r, mid + 1, r, u, v);
    }
};

/*
    [Problem]: https://cses.fi/problemset/task/1737/
    [Code]: https://paste.ubuntu.com/p/YVsJgZRHhV/
*/