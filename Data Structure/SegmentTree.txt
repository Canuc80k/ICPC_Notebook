struct STN {ll mi;};
struct SegmentTree {
    const STN DEF = {(ll)1e18};
    vector<STN> s; ll uu, vv;
    SegmentTree(ll n): s(4 * n + 10, DEF), uu(0), vv(n) {}
    STN merge(STN a, STN b) {return {min(a.mi, b.mi)};}
    void update(ll pos, ll val) {update(pos, val, 1, uu, vv);}
    void update(ll pos, ll val, ll id, ll l, ll r) {
        if (l > pos || r < pos) return;
        if (l == r) {
            s[id].mi = val;
            return;
        }
        ll mid = (l + r) >> 1;
        update(pos, val, id << 1, l, mid);
        update(pos, val, id << 1 | 1, mid + 1, r);
        s[id] = merge(s[id << 1], s[id << 1 | 1]);
    }
    STN get(ll u, ll v) {return get(u, v, 1, uu, vv);}
    STN get(ll u, ll v, ll id, ll l, ll r) {
        if (l > v || r < u) return DEF;
        if (u <= l && r <= v) return s[id];
        ll mid = (l + r) >> 1;
        return merge(get(u, v, id << 1, l, mid), get(u, v, id << 1 | 1, mid + 1, r));
    }
};